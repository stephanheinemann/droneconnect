# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import droneconnect_pb2 as droneconnect__pb2


class DroneConnectStub(object):
  """The droneconnect service definition.
  Services are meant to provide a layer of abstraction for
  controlling and accessing information from the drone.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAutopilotInfo = channel.unary_unary(
        '/droneconnect.DroneConnect/getAutopilotInfo',
        request_serializer=droneconnect__pb2.UavIdentifier.SerializeToString,
        response_deserializer=droneconnect__pb2.AutopilotInfo.FromString,
        )
    self.getPosition = channel.unary_unary(
        '/droneconnect.DroneConnect/getPosition',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.Position.FromString,
        )
    self.getTimedPosition = channel.unary_unary(
        '/droneconnect.DroneConnect/getTimedPosition',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.TimedPosition.FromString,
        )
    self.getHeading = channel.unary_unary(
        '/droneconnect.DroneConnect/getHeading',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.Heading.FromString,
        )
    self.getAttitude = channel.unary_unary(
        '/droneconnect.DroneConnect/getAttitude',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.Attitude.FromString,
        )
    self.setMode = channel.unary_unary(
        '/droneconnect.DroneConnect/setMode',
        request_serializer=droneconnect__pb2.Mode.SerializeToString,
        response_deserializer=droneconnect__pb2.Null.FromString,
        )
    self.hasMode = channel.unary_unary(
        '/droneconnect.DroneConnect/hasMode',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.Mode.FromString,
        )
    self.setArmed = channel.unary_unary(
        '/droneconnect.DroneConnect/setArmed',
        request_serializer=droneconnect__pb2.Armed.SerializeToString,
        response_deserializer=droneconnect__pb2.Null.FromString,
        )
    self.isArmed = channel.unary_unary(
        '/droneconnect.DroneConnect/isArmed',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.Armed.FromString,
        )
    self.setSafety = channel.unary_unary(
        '/droneconnect.DroneConnect/setSafety',
        request_serializer=droneconnect__pb2.Safety.SerializeToString,
        response_deserializer=droneconnect__pb2.Null.FromString,
        )
    self.getSafety = channel.unary_unary(
        '/droneconnect.DroneConnect/getSafety',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.Safety.FromString,
        )
    self.takeoff = channel.unary_unary(
        '/droneconnect.DroneConnect/takeoff',
        request_serializer=droneconnect__pb2.TakeoffToAltitude.SerializeToString,
        response_deserializer=droneconnect__pb2.Position.FromString,
        )
    self.setPath = channel.stream_unary(
        '/droneconnect.DroneConnect/setPath',
        request_serializer=droneconnect__pb2.Position.SerializeToString,
        response_deserializer=droneconnect__pb2.Null.FromString,
        )
    self.getNextWaypoint = channel.unary_unary(
        '/droneconnect.DroneConnect/getNextWaypoint',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.IndexedPosition.FromString,
        )
    self.getStatus = channel.unary_unary(
        '/droneconnect.DroneConnect/getStatus',
        request_serializer=droneconnect__pb2.Null.SerializeToString,
        response_deserializer=droneconnect__pb2.Status.FromString,
        )


class DroneConnectServicer(object):
  """The droneconnect service definition.
  Services are meant to provide a layer of abstraction for
  controlling and accessing information from the drone.
  """

  def getAutopilotInfo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getPosition(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getTimedPosition(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getHeading(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAttitude(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setMode(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def hasMode(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setArmed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isArmed(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setSafety(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getSafety(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def takeoff(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setPath(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getNextWaypoint(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DroneConnectServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAutopilotInfo': grpc.unary_unary_rpc_method_handler(
          servicer.getAutopilotInfo,
          request_deserializer=droneconnect__pb2.UavIdentifier.FromString,
          response_serializer=droneconnect__pb2.AutopilotInfo.SerializeToString,
      ),
      'getPosition': grpc.unary_unary_rpc_method_handler(
          servicer.getPosition,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.Position.SerializeToString,
      ),
      'getTimedPosition': grpc.unary_unary_rpc_method_handler(
          servicer.getTimedPosition,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.TimedPosition.SerializeToString,
      ),
      'getHeading': grpc.unary_unary_rpc_method_handler(
          servicer.getHeading,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.Heading.SerializeToString,
      ),
      'getAttitude': grpc.unary_unary_rpc_method_handler(
          servicer.getAttitude,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.Attitude.SerializeToString,
      ),
      'setMode': grpc.unary_unary_rpc_method_handler(
          servicer.setMode,
          request_deserializer=droneconnect__pb2.Mode.FromString,
          response_serializer=droneconnect__pb2.Null.SerializeToString,
      ),
      'hasMode': grpc.unary_unary_rpc_method_handler(
          servicer.hasMode,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.Mode.SerializeToString,
      ),
      'setArmed': grpc.unary_unary_rpc_method_handler(
          servicer.setArmed,
          request_deserializer=droneconnect__pb2.Armed.FromString,
          response_serializer=droneconnect__pb2.Null.SerializeToString,
      ),
      'isArmed': grpc.unary_unary_rpc_method_handler(
          servicer.isArmed,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.Armed.SerializeToString,
      ),
      'setSafety': grpc.unary_unary_rpc_method_handler(
          servicer.setSafety,
          request_deserializer=droneconnect__pb2.Safety.FromString,
          response_serializer=droneconnect__pb2.Null.SerializeToString,
      ),
      'getSafety': grpc.unary_unary_rpc_method_handler(
          servicer.getSafety,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.Safety.SerializeToString,
      ),
      'takeoff': grpc.unary_unary_rpc_method_handler(
          servicer.takeoff,
          request_deserializer=droneconnect__pb2.TakeoffToAltitude.FromString,
          response_serializer=droneconnect__pb2.Position.SerializeToString,
      ),
      'setPath': grpc.stream_unary_rpc_method_handler(
          servicer.setPath,
          request_deserializer=droneconnect__pb2.Position.FromString,
          response_serializer=droneconnect__pb2.Null.SerializeToString,
      ),
      'getNextWaypoint': grpc.unary_unary_rpc_method_handler(
          servicer.getNextWaypoint,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.IndexedPosition.SerializeToString,
      ),
      'getStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getStatus,
          request_deserializer=droneconnect__pb2.Null.FromString,
          response_serializer=droneconnect__pb2.Status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'droneconnect.DroneConnect', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
